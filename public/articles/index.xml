<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on tidypredict</title>
    <link>/articles/</link>
    <description>Recent content in Articles on tidypredict</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the GPL-3 license</copyright>
    
	<atom:link href="/articles/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Database write-back</title>
      <link>/articles/sql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/articles/sql/</guid>
      <description>This article reviews two possible scenarios for “writing back” predictions to the database, and without importing importing the data into memory first. Both scenarios share a common model preparation method.
Example setupTo keep the example reproducible, a SQLite database will be used to simulate a larger scale deployment.
First the data is prepared in memory. The article will use the nycflights13::flights data, with a couple of modifications
library(dplyr)flights_table &amp;lt;- nycflights13::flights %&amp;gt;%mutate(current_score = 0) %&amp;gt;%rowid_to_column(&amp;quot;flight_id&amp;quot;)A new database is created using RSQLite.</description>
    </item>
    
    <item>
      <title>Generalized Linear model</title>
      <link>/articles/glm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/articles/glm/</guid>
      <description>Highlights &amp;amp; LimitationsDefaults to 0-to-1 predictions for binomial family models. That is akin to running predict(model, type = &amp;quot;response&amp;quot;)Only treatment contrast (contr.treatment) are supported.offset is supportedCategorical variables are supportedIn-line functions in the formulas are not supported:OK - wt ~ mpg + amOK - mutate(mtcars, newam = paste0(am)) and then wt ~ mpg + newamNot OK - wt ~ mpg + as.</description>
    </item>
    
    <item>
      <title>Linear Regression model</title>
      <link>/articles/lm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/articles/lm/</guid>
      <description>Highlights &amp;amp; LimitationsSupports prediction intervals, it uses the qr.solve() function to parse the interval coefficient of each term.Supports categorical variables and interactionsOnly treatment contrast (contr.treatment) are supported.offset is supportedCategorical variables are supportedIn-line functions in the formulas are not supported:OK - wt ~ mpg + amOK - mutate(mtcars, newam = paste0(am)) and then wt ~ mpg + newamNot OK - wt ~ mpg + as.</description>
    </item>
    
    <item>
      <title>Random Forest model</title>
      <link>/articles/randomforest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/articles/randomforest/</guid>
      <description>Highlights &amp;amp; LimitationsUses the randomForest::getTree() to parse each decision path.In-line functions in the formulas are not supported:OK - wt ~ mpg + amOK - mutate(mtcars, newam = paste0(am)) and then wt ~ mpg + newamNot OK - wt ~ mpg + as.factor(am)Not OK - wt ~ mpg + as.character(am)Interval functions are not supported: tidypredict_interval() &amp;amp; tidypredict_sql_interval()How it worksHere is a simple randomForest() model using the iris dataset:</description>
    </item>
    
  </channel>
</rss>